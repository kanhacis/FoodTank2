app-User
    - Abstract user
    - mobile
    - user_type
    
   -Address
    - user (fk)
    - state
    - city
    - area
    - zipcode
    - landmark
    - category (home or work) 
    
app-Restaurant
    - user (fk)
    - name 
    - city
    - address
    - mobile
    - is_varified
    - veg_or_nonveg 
    - no_of_chefs
    - start_date 
    - img1
    - img2
    - img3
    - img4
    
   -Cuisine
    - restaurant (fk)
    - cuisine
    
app-Menu
    - restaurant (fk)
    - name 
    - desp..
    - type
    - price
    - img1 
    
   -Review
    - user (fk)
    - menu (fk)
    - rating 
    - description
    - date (optional) 
    
app-Bag 
    - User (one-to-one) 

   -BagItem 
    - bag (fk) 
    - item (Menu --> fk) 
    - quantity 
    
==================================
    
app-Order
    - order_id
    - restaurant (fk)
    - is_confirmed
    - estimated_time
    - driver (fk)
    
   -OrderItem
    - item (fk -- menu)
    - order (fk)
    - quantity 
    
app-Driver
    - User (fk)
    - is_varified     


==========================================

Task Name :- FoodTank Website (Django)
Time sheet filled : Yes

Work Done Today:-
    1. Django
        - Done with admin profile picture.
        - Learn serialization
        - Start learning deserialization
        
Day Start Time: 12:05
Day End Time:  9:00




Done with admin profile || Learn serialization & deserialization







# Rendering add to bag page & write logic to add food in my bag.
def addToBag(request, id):
    # Check if the user is authenticated, if not, return a JSON response indicating the need for login
    if not request.user.is_authenticated or not request.user.user_type == "Customer":
        return redirect('/login/')

    # Get the menu item
    menuItem = Menu.objects.get(id=id)

    # Check if the user has a bag
    userBag, created = Bag.objects.get_or_create(user=request.user)

    # Check if the item is already in the bag
    bagItem, created = BagItem.objects.get_or_create(bag=userBag, item=menuItem)

    if created or bagItem.quantity == 0:
        # If the bag item is just created or the quantity is zero, set the quantity to 1
        bagItem.quantity = 1
    else:
        # Send response (item already existing)
        return JsonResponse({'status':'itemAddedAlready'})

    bagItem.save()
    
    # Get the count of bagItems
    bagItemCount = BagItem.objects.filter(bag=userBag).count()
    bagFoods = BagItem.objects.filter(bag=userBag)
    
    bagFoodsName = []
    for i in bagFoods:
        bagFoodsName.append(i.item.name)
    
    return JsonResponse({'status': 'itemAdded', 'bagItemCount':bagItemCount, 'bagFoodsName':bagFoodsName})



docker build --tag foodtank .

docker run -it --name container1 -p 8000:8000 foodtank